import pandas as pd
import requests
import re
from bs4 import BeautifulSoup
import numpy as np
headers={'User-Agent':'Mozilla/5.0 (Windows NT 6.3; Win 64 ; x64) Apple WeKit /537.36(KHTML , like Gecko) Chrome/80.0.3987.162 Safari/537.36'}


webpage=requests.get('https://www.goodreads.com/shelf/show/thriller?page=1').text

soup=BeautifulSoup(webpage,'lxml')
for i in soup.find_all('h1'):
  print(i.text.strip())
len(soup.find_all('a', class_='bookTitle'))
len(soup.find_all('a', class_='authorName'))
company = soup.find_all('div', class_ = 'elementList')
len(company)


bookName = []
authorName = []
avg_rating = []
num_ratings = []
published_year = []

for i in company:
    book_title_element = i.find('a', class_='bookTitle')
    author_name_element = i.find('a', class_='authorName')
    rating_element = i.find('span', class_='greyText smallText')

    if book_title_element is not None:
        bookName.append(book_title_element.text.strip())
    else:
        bookName.append("N/A")

    if author_name_element is not None:
        authorName.append(author_name_element.text.strip())
    else:
        authorName.append("N/A")

    if rating_element is not None:

        rating_text = rating_element.text.strip()
        avg_match = re.search(r'avg rating (\d+\.\d+)', rating_text)
        num_match = re.search(r'(\d+,\d+) ratings', rating_text)
        year_match = re.search(r'published (\d{4})', rating_text)

        avg_rating.append(avg_match.group(1) if avg_match else "N/A")
        num_ratings.append(num_match.group(1).replace(',', '') if num_match else "N/A")
        published_year.append(year_match.group(1) if year_match else "N/A")
    else:
        avg_rating.append("N/A")
        num_ratings.append("N/A")
        published_year.append("N/A")


df = pd.DataFrame({'bookName':bookName,
                   'authorName':authorName,
                   'avg_rating':avg_rating,
                   'num_ratings':num_ratings,
                   'published_year':published_year})
bookName

authorName
avg_rating
num_ratings
published_year
df
df.shape

df = df[df['bookName'] != 'N/A']

df
final = pd.DataFrame()
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win 64 ; x64) Apple WeKit /537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Safari/537.36'
}


num_pages = 25 #max no. of pages

for page_num in range(1, num_pages + 1):
    url = f'https://www.goodreads.com/shelf/show/thriller?page={page_num}'
    webpage = requests.get(url, headers=headers).text

    soup = BeautifulSoup(webpage, 'lxml')

    bookName = []
    authorName = []
    avg_rating = []
    num_ratings = []
    published_year = []

    for i in company:
        book_title_element = i.find('a', class_='bookTitle')
        author_name_element = i.find('a', class_='authorName')
        rating_element = i.find('span', class_='greyText smallText')

        if book_title_element is not None:
            bookName.append(book_title_element.text.strip())
        else:
            bookName.append("N/A")

        if author_name_element is not None:
            authorName.append(author_name_element.text.strip())
        else:
            authorName.append("N/A")

        if rating_element is not None:
            rating_text = rating_element.text.strip()
            avg_match = re.search(r'avg rating (\d+\.\d+)', rating_text)
            num_match = re.search(r'(\d+,\d+) ratings', rating_text)
            year_match = re.search(r'published (\d{4})', rating_text)

            avg_rating.append(avg_match.group(1) if avg_match else "N/A")
            num_ratings.append(num_match.group(1).replace(',', '') if num_match else "N/A")
            published_year.append(year_match.group(1) if year_match else "N/A")
        else:
            avg_rating.append("N/A")
            num_ratings.append("N/A")
            published_year.append("N/A")

    df = pd.DataFrame({'bookName': bookName,
                       'authorName': authorName,
                       'avg_rating': avg_rating,
                       'num_ratings': num_ratings,
                       'published_year': published_year})

    final = final.append(df, ignore_index=True)

final.to_csv('goodreads_thriller_books.csv', index=False)

final=final.append(df,ignore_index=True)
df = df[df['bookName'] != 'N/A']

df.shape

final.shape

df

